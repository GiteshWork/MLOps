# .github/workflows/training.yml

name: Model Training Pipeline

# This workflow triggers on any push to the 'main' branch
on:
  push:
    branches: [ "main" ]

jobs:
  train-model:
    # The type of virtual machine to run the job on
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out your repository code
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Clear existing mlruns directory
      working-directory: ./mlops-project-2
      run: rm -rf mlruns    

    # Step 3: Install Python dependencies
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install scikit-learn mlflow

    - name: Display contents of training script for debugging
      working-directory: ./mlops-project-2
      run: cat train_mlflow.py    

    # Step 4: Run the MLflow training script
    - name: Run training script
      working-directory: ./mlops-project-2
      run: python3 train_mlflow.py

    # Step 5: Commit the results back to the repository
    # This is a simple way to save our results for now.
    # In a real project, we'd use a remote MLflow server.
    - name: Commit mlruns directory
      run: |
        git config --global GiteshWork 'github-actions'
        git config --global work.giteshpradhan@gmail.com 'github-actions@github.com'
        git add mlruns
        # The following command only commits if there are changes
        git commit -m "Log new MLflow run results" || echo "No changes to commit"
        git push
